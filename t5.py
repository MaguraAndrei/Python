# -*- coding: utf-8 -*-
"""T5

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cxAAGb-nTxErrqjblweSrJijUI6PeBAp
"""



import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the CSV file
df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/facebook_ads_data.csv')
print(df)

# Convert the 'ad_date' column to datetime format
df['ad_date'] = pd.to_datetime(df['ad_date'])

# Filter the data for the year 2021
df_2021 = df[df['ad_date'].dt.year == 2021]
print(df_2021)



# 1. Group the data by date and calculate the total spend and ROMI
grouped_daily = df_2021.groupby('ad_date').agg({'total_spend': 'sum', 'romi': 'mean'}).reset_index()
print(grouped_daily)

# Plotting the total spend in 2021
plt.figure(figsize=(12, 6))
plt.plot(grouped_daily['ad_date'], grouped_daily['total_spend'], marker='o', linestyle='-', color='b')
plt.title('Total Advertising Spend in 2021')
plt.xlabel('Date')
plt.ylabel('Total Spend')
plt.grid(True)
plt.show()

# Plotting the daily ROMI in 2021
plt.figure(figsize=(12, 6))
plt.plot(grouped_daily['ad_date'], grouped_daily['romi'], marker='o', linestyle='-', color='g')
plt.title('Daily ROMI in 2021')
plt.xlabel('Date')
plt.ylabel('ROMI')
plt.grid(True)
plt.show()

# Bonus: Rolling average
grouped_daily['total_spend_ma'] = grouped_daily['total_spend'].rolling(window=7).mean()
grouped_daily['romi_ma'] = grouped_daily['romi'].rolling(window=7).mean()

# Plotting the moving average of total spend in 2021
plt.figure(figsize=(12, 6))
plt.plot(grouped_daily['ad_date'], grouped_daily['total_spend_ma'], marker='o', linestyle='-', color='b')
plt.title('7-Day Moving Average of Total Advertising Spend in 2021')
plt.xlabel('Date')
plt.ylabel('Total Spend (7-Day MA)')
plt.grid(True)
plt.show()

# Plotting the moving average of daily ROMI in 2021
plt.figure(figsize=(12, 6))
plt.plot(grouped_daily['ad_date'], grouped_daily['romi_ma'], marker='o', linestyle='-', color='g')
plt.title('7-Day Moving Average of Daily ROMI in 2021')
plt.xlabel('Date')
plt.ylabel('ROMI (7-Day MA)')
plt.grid(True)
plt.show()

# 2. Grouping data by campaign and plotting total spend and ROMI by campaign
grouped_campaign = df.groupby('campaign_name').agg({'total_spend': 'sum', 'romi': 'mean'}).reset_index()
print(grouped_campaign)

# Plotting total spend by campaign
plt.figure(figsize=(12, 6))
sns.barplot(data=grouped_campaign, x='campaign_name', y='total_spend', palette='Blues_d')
plt.title('Total Advertising Spend by Campaign')
plt.xlabel('Campaign Name')
plt.ylabel('Total Spend')
plt.xticks(rotation=45)
plt.show()

# Plotting ROMI by campaign
plt.figure(figsize=(12, 6))
sns.barplot(data=grouped_campaign, x='campaign_name', y='romi', palette='Greens_d')
plt.title('ROMI by Campaign')
plt.xlabel('Campaign Name')
plt.ylabel('ROMI')
plt.xticks(rotation=45)
plt.show()

# 3. Boxplot to determine distribution of daily ROMI by campaign
plt.figure(figsize=(12, 6))
sns.boxplot(data=df_2021, x='campaign_name', y='romi', palette='Set3')
plt.title('Daily ROMI Distribution by Campaign in 2021')
plt.xlabel('Campaign Name')
plt.ylabel('ROMI')
plt.xticks(rotation=45)
plt.show()

# 4. Histogram of ROMI distribution
plt.figure(figsize=(12, 6))
sns.histplot(df['romi'].dropna(), kde=True, bins=30, color='purple')
plt.title('Histogram of ROMI Distribution')
plt.xlabel('ROMI')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

# 5. Heatmap of correlation between all numeric indicators

# Select only numeric columns for correlation
numeric_df = df.select_dtypes(include=['float64', 'int64'])

# Calculate the correlation matrix
corr_matrix = numeric_df.corr()

# Plot the heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Heatmap of Correlation between Numeric Indicators')
plt.show()

# 6. Linear regression plot between total_spend and total_value
plt.figure(figsize=(10, 6))
sns.lmplot(data=df, x='total_spend', y='total_value', aspect=1.5, scatter_kws={'alpha':0.5}, line_kws={'color': 'red'})
plt.title('Linear Regression between Total Spend and Total Value')
plt.xlabel('Total Spend')
plt.ylabel('Total Value')
plt.grid(True)
plt.show()