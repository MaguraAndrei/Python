# -*- coding: utf-8 -*-
"""T4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oD0BIEDWdOULRAuzPolOG4w45xcHrMOI
"""

import pandas as pd

# Path to the CSV file in Google Drive
file_path = '/content/drive/MyDrive/Colab Notebooks/survey_results_public.csv'

# Read the CSV file into a DataFrame
df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/survey_results_public.csv')

# Display the DataFrame
print(df)

# Numărul total de respondenți
total_respondenți = df.shape[0]
print(f'Câți respondenți au completat sondajul: {total_respondenți}')

# Verifică pentru rânduri fără valori lipsă
respondenți_compleți = df.dropna().shape[0]
print(f'Câți respondenți au răspuns la toate întrebările: {respondenți_compleți}')

# Verifică valorile de tendință centrală pentru WorkExp
workexp_stats = df['WorkExp'].describe()
print('Valorile măsurilor de tendință centrală pentru WorkExp:')
print(workexp_stats[['mean', '50%']])  # media și mediana

# Numără respondenții care lucrează de la distanță
lucrează_de_la_distanță = df[df['RemoteWork'] == 'Remote'].shape[0]
print(f'Câți respondenți lucrează de la distanță: {lucrează_de_la_distanță}')

# 5. Ce procent de respondenți programează în Python?
python_procent = df['LanguageHaveWorkedWith'].str.contains('Python', na=False).mean() * 100
print(f"Procent de respondenți care programează în Python: {python_procent:.2f}%")

# 6. Câți respondenți au învățat să programeze prin cursuri online?
învatat_online = df['LearnCodeOnline'].str.contains('Online', na=False).sum()
print(f"Total respondenți care au învățat să programeze prin cursuri online: {învatat_online}")

# 7. Dintre respondenții care programează în Python, grupați pe țări, care este valoarea medie și mediană a remunerației (ConvertedCompYearly) în fiecare țară?
python_respondenți = df[df['LanguageHaveWorkedWith'].str.contains('Python', na=False)]
remunerație_stats = python_respondenți.groupby('Country')['ConvertedCompYearly'].agg(['mean', 'median']).dropna()
print("Valoarea medie și mediană a remunerației (ConvertedCompYearly) pentru cei care programează în Python, grupate pe țări:")
print(remunerație_stats)

# 8. Ce nivel de educație au cei 5 respondenți cu cea mai mare compensație?
top_5_respondenți = df.nlargest(5, 'ConvertedCompYearly')[['EdLevel', 'ConvertedCompYearly']]
print("Nivelul de educație al celor 5 respondenți cu cea mai mare compensație:")
print(top_5_respondenți)

# Eliminăm valorile lipsă din coloanele 'Age' și 'LanguageHaveWorkedWith'
df_age_python = df[['Age', 'LanguageHaveWorkedWith']].dropna()

# Grupăm pe vârste și calculăm procentul celor care programează în Python
python_percent_by_age = df_age_python.groupby('Age')['LanguageHaveWorkedWith'].apply(
    lambda x: (x.str.contains('Python', na=False).mean()) * 100
    )

print("Procentul de respondenți care programează în Python pentru fiecare grupă de vârstă:")
print(python_percent_by_age)

# Filtrăm respondenții care au lucrat în regim de "remote" (parțial sau total)
remote_workers = df[df['RemoteWork'].str.contains('remote', case=False, na=False)][['ConvertedCompYearly', 'Industry']].dropna()

# Verificăm distribuția remunerației pentru cei care lucrează în regim "remote"
print("Distribuția remunerației pentru cei care lucrează în regim 'remote':")
print(remote_workers['ConvertedCompYearly'].describe())

# Calculăm valoarea a 75-a percentilă a remunerației pentru acești respondenți
percentile_75 = remote_workers['ConvertedCompYearly'].quantile(0.75)

# Filtrăm respondenții care au o remunerație mai mare sau egală cu această valoare
top_earners_remote = remote_workers[remote_workers['ConvertedCompYearly'] >= percentile_75]

# Calculăm frecvențele industriilor în acest grup
industry_frequencies = top_earners_remote['Industry'].value_counts()

print(f"Industriile cele mai frecvente pentru respondenții din a 75-a percentilă a remunerației medii care lucrează în regim 'remote':")
print(industry_frequencies)